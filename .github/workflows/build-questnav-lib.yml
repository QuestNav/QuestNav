name: Build QuestNavLib

on:
  workflow_call:
    inputs:
      version:
        description: 'Base version (e.g., 2025-1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type (dev, beta, rc, release)'
        required: true
        type: string
      frc_year:
        description: 'FRC Year'
        required: true
        type: string
      wpilib_version:
        description: 'WPILib Version'
        required: true
        type: string
      publish_to_maven:
        description: 'Publish to Maven Repository'
        required: true
        type: boolean
    secrets:
      MAVEN_REPO_URL:
        required: false
      MAVEN_USERNAME:
        required: false
      MAVEN_PASSWORD:
        required: false
      DISCORD_WEBHOOK_URL:
        required: false

  # Allow manual testing of library builds
  workflow_dispatch:
    inputs:
      version:
        description: 'Base version (e.g., 2025-1.0.0)'
        required: true
        type: string
        default: '2025-1.0.0'
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - dev
          - beta
          - rc
          - release
        default: 'dev'
      frc_year:
        description: 'FRC Year'
        required: true
        type: string
        default: '2025'
      wpilib_version:
        description: 'WPILib Version'
        required: true
        type: string
        default: '2025.3.2'
      publish_to_maven:
        description: 'Publish to Maven Repository'
        required: true
        type: boolean
        default: false

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2

jobs:
  build-questnavlib:
    runs-on: ubuntu-latest

    outputs:
      final_version: ${{ steps.version.outputs.final_version }}
      artifact_name: ${{ steps.version.outputs.artifact_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: '8.11'

      - name: Calculate Final Version
        id: version
        run: |
          BASE_VERSION="${{ inputs.version }}"
          RELEASE_TYPE="${{ inputs.release_type }}"
          
          if [ "$RELEASE_TYPE" = "release" ]; then
            FINAL_VERSION="$BASE_VERSION"
          else
            FINAL_VERSION="$BASE_VERSION-$RELEASE_TYPE"
          fi
          
          echo "final_version=$FINAL_VERSION" >> $GITHUB_OUTPUT
          echo "artifact_name=questnavlib-$FINAL_VERSION" >> $GITHUB_OUTPUT
          echo "is_snapshot=$([[ $RELEASE_TYPE == "dev" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "repo_type=$([[ $RELEASE_TYPE == "dev" ]] && echo "snapshots" || echo "release")" >> $GITHUB_OUTPUT
          
          echo "üì¶ Building QuestNavLib version: $FINAL_VERSION"
          echo "üìÇ Repository type: $([[ $RELEASE_TYPE == "dev" ]] && echo "snapshots" || echo "release")"

      - name: Display Build Configuration
        run: |
          echo "üîç QuestNavLib Build Configuration:"
          ./gradlew buildInfo \
            -PquestnavVersion="${{ inputs.version }}" \
            -PreleaseType="${{ inputs.release_type }}" \
            -PfrcYear="${{ inputs.frc_year }}" \
            -PwpilibVersion="${{ inputs.wpilib_version }}"

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-lib-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-lib-

      - name: Build Library
        run: |
          echo "üî® Building QuestNavLib..."
          ./gradlew build \
            -PquestnavVersion="${{ inputs.version }}" \
            -PreleaseType="${{ inputs.release_type }}" \
            -PfrcYear="${{ inputs.frc_year }}" \
            -PwpilibVersion="${{ inputs.wpilib_version }}"

      - name: Generate Vendor JSON
        run: |
          echo "üìÑ Generating vendor dependency JSON..."
          ./gradlew generateVendorJson \
            -PquestnavVersion="${{ inputs.version }}" \
            -PreleaseType="${{ inputs.release_type }}" \
            -PfrcYear="${{ inputs.frc_year }}" \
            -PwpilibVersion="${{ inputs.wpilib_version }}"

      - name: Prepare Artifacts
        run: |
          echo "üì¶ Preparing QuestNavLib artifacts..."
          ./gradlew copyVendorJsonLocal \
            -PquestnavVersion="${{ inputs.version }}" \
            -PreleaseType="${{ inputs.release_type }}" \
            -PfrcYear="${{ inputs.frc_year }}" \
            -PwpilibVersion="${{ inputs.wpilib_version }}"
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Copy vendor JSON with versioned filename
          cp build/generated/vendordeps/questnavlib.json artifacts/questnavlib-${{ steps.version.outputs.final_version }}.json
          cp build/generated/vendordeps/questnavlib.json artifacts/questnavlib.json
          
          # Copy additional outputs
          cp -r build/outputs/vendordeps/* artifacts/ 2>/dev/null || true
          
          echo "üìã QuestNavLib artifacts:"
          ls -la artifacts/

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.version.outputs.artifact_name }}
          path: artifacts/
          retention-days: 30

      - name: Publish to Maven Repository
        if: ${{ inputs.publish_to_maven == true && secrets.MAVEN_REPO_URL != '' }}
        run: |
          echo "üöÄ Publishing QuestNavLib to Maven repository..."
          ./gradlew publish \
            -PquestnavVersion="${{ inputs.version }}" \
            -PreleaseType="${{ inputs.release_type }}" \
            -PfrcYear="${{ inputs.frc_year }}" \
            -PwpilibVersion="${{ inputs.wpilib_version }}" \
            -PmavenRepoUrl="${{ secrets.MAVEN_REPO_URL }}" \
            -PmavenUsername="${{ secrets.MAVEN_USERNAME }}" \
            -PmavenPassword="${{ secrets.MAVEN_PASSWORD }}"
        env:
          MAVEN_REPO_URL: ${{ secrets.MAVEN_REPO_URL }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}

      - name: Verify Publication
        if: ${{ inputs.publish_to_maven == true && secrets.MAVEN_REPO_URL != '' }}
        run: |
          echo "‚úÖ QuestNavLib published successfully!"
          echo "üì¶ Version: ${{ steps.version.outputs.final_version }}"
          echo "üîó Vendor JSON URL:"
          echo "https://maven.questnav.gg/repository/${{ steps.version.outputs.repo_type }}/gg/questnav/questnavlib-json/${{ steps.version.outputs.final_version }}/questnavlib-json-${{ steps.version.outputs.final_version }}.json"

      - name: Send Discord Notification (Success)
        if: success() && secrets.DISCORD_WEBHOOK_URL != ''
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ‚úÖ **QuestNavLib Build Successful!**
            
            **Version:** `${{ steps.version.outputs.final_version }}`
            **FRC Year:** `${{ inputs.frc_year }}`
            **WPILib:** `${{ inputs.wpilib_version }}`
            
            ${{ inputs.publish_to_maven == true && 'üì¶ Published to Maven ‚úÖ' || 'üì¶ Build only (no publish)' }}
            
            **Vendor JSON URL:**
            ```
            https://maven.questnav.gg/repository/${{ steps.version.outputs.repo_type }}/gg/questnav/questnavlib-json/${{ steps.version.outputs.final_version }}/questnavlib-json-${{ steps.version.outputs.final_version }}.json
            ```

      - name: Send Discord Notification (Failure)
        if: failure() && secrets.DISCORD_WEBHOOK_URL != ''
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ‚ùå **QuestNavLib Build Failed!**
            
            **Version:** `${{ steps.version.outputs.final_version }}`
            **Job:** `${{ github.job }}`
            **Workflow:** `${{ github.workflow }}`
            
            Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.