syntax = "proto3";

/**
 * WPILib 2D Geometry Protocol Buffer Definitions
 * 
 * This file defines 2D geometric primitives used throughout the WPILib ecosystem
 * and by extension, the QuestNav system. These messages provide a standardized
 * way to represent common 2D geometric concepts used in robotics applications.
 * 
 * The geometric primitives follow WPILib conventions:
 * - Right-handed coordinate system
 * - Counter-clockwise positive rotation
 * - Units in meters for distances, radians for angles
 * - Field-relative coordinate system for robot poses
 * 
 * These messages are designed to be:
 * - Compact and efficient for network transmission
 * - Compatible with WPILib's existing geometry classes
 * - Suitable for real-time robotics applications
 * 
 * Coordinate System Convention:
 * - X-axis: Forward direction (towards opposing alliance)
 * - Y-axis: Left direction (when facing forward)
 * - Origin: Typically at field corner or center (depends on field setup)
 * - Rotation: 0 radians = facing down-field (positive X direction)
 */

package wpi.proto;

option java_package = "edu.wpi.first.math.proto";

/**
 * Represents a 2D translation (displacement) vector.
 * 
 * This message encodes a 2D displacement or position vector using Cartesian
 * coordinates. It's used as a building block for more complex geometric
 * representations like poses and transforms.
 * 
 * Applications:
 * - Robot position on field
 * - Displacement between two points
 * - Velocity vectors (when representing change in position)
 * - Waypoint coordinates
 * 
 * Coordinate System:
 * - X: Forward/backward displacement (positive = forward)
 * - Y: Left/right displacement (positive = left)
 * - Units: meters
 */
message ProtobufTranslation2d {
  /**
   * X-coordinate (forward/backward displacement).
   * 
   * Positive values indicate forward direction (towards opposing alliance).
   * Negative values indicate backward direction.
   * Units: meters
   */
  double x = 1;
  
  /**
   * Y-coordinate (left/right displacement).
   * 
   * Positive values indicate leftward direction (when facing forward).
   * Negative values indicate rightward direction.
   * Units: meters
   */
  double y = 2;
}

/**
 * Represents a 2D rotation angle.
 * 
 * This message encodes a rotation in the 2D plane using a single angle value.
 * It follows the standard mathematical convention for angle measurement and
 * is used to represent orientations and rotational displacements.
 * 
 * Applications:
 * - Robot heading/orientation on field
 * - Rotational component of poses and transforms
 * - Angular displacement between orientations
 * - Waypoint headings
 * 
 * Angle Convention:
 * - 0 radians: Facing positive X direction (forward on field)
 * - π/2 radians: Facing positive Y direction (left on field)
 * - π radians: Facing negative X direction (backward on field)
 * - 3π/2 radians: Facing negative Y direction (right on field)
 * - Counter-clockwise rotation is positive
 */
message ProtobufRotation2d {
  /**
   * Rotation angle in radians.
   * 
   * The angle is measured counter-clockwise from the positive X-axis.
   * Range: Typically -π to π, but can represent any angle value.
   * 
   * Examples:
   * - 0.0: Facing forward (positive X)
   * - π/2: Facing left (positive Y)
   * - π: Facing backward (negative X)
   * - -π/2 or 3π/2: Facing right (negative Y)
   * 
   * Units: radians
   */
  double value = 1;
}

/**
 * Represents a complete 2D pose (position and orientation).
 * 
 * This message combines a 2D position (translation) with a 2D orientation
 * (rotation) to fully describe an object's pose in the 2D plane. This is
 * the fundamental representation for robot poses in WPILib and QuestNav.
 * 
 * A pose answers two questions:
 * 1. Where is the object? (translation component)
 * 2. Which direction is it facing? (rotation component)
 * 
 * Applications:
 * - Robot pose on field (primary use in QuestNav)
 * - Waypoint targets for path following
 * - Relative poses between objects
 * - Initial poses for localization
 * 
 * The pose represents the robot's coordinate frame relative to the field
 * coordinate frame, allowing transformation of points between the two systems.
 */
message ProtobufPose2d {
  /**
   * Position component of the pose.
   * 
   * This specifies where the robot is located on the field using the
   * field coordinate system. The translation represents the position of
   * the robot's coordinate frame origin (typically the robot center).
   */
  ProtobufTranslation2d translation = 1;
  
  /**
   * Orientation component of the pose.
   * 
   * This specifies which direction the robot is facing on the field.
   * The rotation represents the angle between the robot's forward direction
   * and the field's positive X-axis (forward direction).
   * 
   * Combined with translation, this fully defines the robot's pose and
   * allows for coordinate transformations between robot and field frames.
   */
  ProtobufRotation2d rotation = 2;
}

/**
 * Represents a 2D coordinate transformation.
 * 
 * This message describes how to transform coordinates from one 2D coordinate
 * frame to another. It combines a translation and rotation to define the
 * relationship between two coordinate systems.
 * 
 * Mathematical Interpretation:
 * Given a point P in frame A, the corresponding point in frame B is:
 * P_B = Transform2d * P_A = Rotation * P_A + Translation
 * 
 * Applications:
 * - Transform between robot and field coordinate frames
 * - Relative positioning between objects
 * - Coordinate frame conversions in path planning
 * - Sensor calibration and mounting offsets
 * 
 * The transform represents "how to get from frame A to frame B" and can be
 * inverted to get the reverse transformation.
 */
message ProtobufTransform2d {
  /**
   * Translation component of the transformation.
   * 
   * This represents the displacement between the origins of the two
   * coordinate frames. It specifies how far and in which direction
   * the target frame's origin is from the source frame's origin.
   */
  ProtobufTranslation2d translation = 1;
  
  /**
   * Rotation component of the transformation.
   * 
   * This represents the angular difference between the two coordinate
   * frames. It specifies how much the target frame is rotated relative
   * to the source frame.
   * 
   * The rotation is applied before the translation in the transformation
   * sequence (standard mathematical convention).
   */
  ProtobufRotation2d rotation = 2;
}

/**
 * Represents a 2D twist (velocity in 2D space).
 * 
 * This message encodes the instantaneous velocity of an object in 2D space,
 * including both linear and angular velocity components. It describes how
 * an object's pose is changing over time.
 * 
 * Mathematical Interpretation:
 * The twist represents the time derivative of pose:
 * - dx/dt: Rate of change in X position
 * - dy/dt: Rate of change in Y position  
 * - dθ/dt: Rate of change in orientation
 * 
 * Applications:
 * - Robot velocity commands for motion control
 * - Velocity feedback from odometry systems
 * - Velocity constraints in path planning
 * - Dynamic modeling and simulation
 * 
 * Coordinate Frame:
 * The twist can be expressed in different coordinate frames (robot-relative
 * or field-relative) depending on the application context.
 */
message ProtobufTwist2d {
  /**
   * Linear velocity in X direction.
   * 
   * Rate of change of X position over time. In field coordinates,
   * this represents forward/backward velocity.
   * 
   * Positive values: Moving in positive X direction (forward)
   * Negative values: Moving in negative X direction (backward)
   * Units: meters per second
   */
  double dx = 1;
  
  /**
   * Linear velocity in Y direction.
   * 
   * Rate of change of Y position over time. In field coordinates,
   * this represents left/right velocity (strafing).
   * 
   * Positive values: Moving in positive Y direction (left)
   * Negative values: Moving in negative Y direction (right)
   * Units: meters per second
   */
  double dy = 2;
  
  /**
   * Angular velocity (rate of rotation).
   * 
   * Rate of change of orientation over time. This represents how
   * fast the object is rotating in the 2D plane.
   * 
   * Positive values: Counter-clockwise rotation
   * Negative values: Clockwise rotation
   * Units: radians per second
   */
  double dtheta = 3;
}

/**
 * Represents a 2D rectangle with arbitrary orientation.
 * 
 * This message defines a rectangular region in 2D space using a center pose
 * and width/height dimensions. The rectangle can be rotated to any orientation
 * based on the center pose's rotation component.
 * 
 * Geometric Properties:
 * - Center point and orientation defined by pose
 * - Width extends along the pose's X-axis (local forward direction)
 * - Height extends along the pose's Y-axis (local left direction)
 * - Total area = xWidth * yWidth
 * 
 * Applications:
 * - Robot footprint representation
 * - Obstacle and keep-out zone definitions
 * - Field element boundaries
 * - Collision detection regions
 * - Path planning constraints
 */
message ProtobufRectangle2d {
  /**
   * Center pose of the rectangle.
   * 
   * The translation component specifies the center point of the rectangle
   * in the coordinate system. The rotation component specifies the
   * orientation of the rectangle's local coordinate frame.
   * 
   * The rectangle's edges are aligned with this local coordinate frame:
   * - Width extends along local X-axis (rotated forward direction)
   * - Height extends along local Y-axis (rotated left direction)
   */
  ProtobufPose2d center = 1;
  
  /**
   * Width of the rectangle along its local X-axis.
   * 
   * This is the dimension of the rectangle in the direction of the
   * center pose's forward direction (after rotation). The rectangle
   * extends ±xWidth/2 from the center along this axis.
   * 
   * Units: meters
   * Must be positive
   */
  double xWidth = 2;
  
  /**
   * Height of the rectangle along its local Y-axis.
   * 
   * This is the dimension of the rectangle in the direction of the
   * center pose's left direction (after rotation). The rectangle
   * extends ±yWidth/2 from the center along this axis.
   * 
   * Units: meters
   * Must be positive
   */
  double yWidth = 3;
}

/**
 * Represents a 2D ellipse with arbitrary orientation.
 * 
 * This message defines an elliptical region in 2D space using a center pose
 * and semi-axis lengths. The ellipse can be rotated to any orientation
 * based on the center pose's rotation component.
 * 
 * Geometric Properties:
 * - Center point and orientation defined by pose
 * - Major/minor axes aligned with pose's local coordinate frame
 * - X semi-axis extends along pose's X-axis (local forward direction)
 * - Y semi-axis extends along pose's Y-axis (local left direction)
 * - Total area = π * xSemiAxis * ySemiAxis
 * 
 * Applications:
 * - Uncertainty ellipses for localization
 * - Smooth obstacle representations
 * - Robot operating regions
 * - Sensor coverage areas
 * - Path planning with uncertainty
 * 
 * Special Cases:
 * - Circle: xSemiAxis = ySemiAxis
 * - Degenerate ellipse: one semi-axis approaches zero (becomes a line)
 */
message ProtobufEllipse2d {
  /**
   * Center pose of the ellipse.
   * 
   * The translation component specifies the center point of the ellipse
   * in the coordinate system. The rotation component specifies the
   * orientation of the ellipse's local coordinate frame.
   * 
   * The ellipse's axes are aligned with this local coordinate frame:
   * - X semi-axis extends along local X-axis (rotated forward direction)
   * - Y semi-axis extends along local Y-axis (rotated left direction)
   */
  ProtobufPose2d center = 1;
  
  /**
   * Semi-axis length along the ellipse's local X-axis.
   * 
   * This is half the width of the ellipse in the direction of the
   * center pose's forward direction (after rotation). The ellipse
   * extends ±xSemiAxis from the center along this axis.
   * 
   * Units: meters
   * Must be positive
   * 
   * Note: This is the semi-axis, not the full width. The full width
   * along this axis is 2 * xSemiAxis.
   */
  double xSemiAxis = 2;
  
  /**
   * Semi-axis length along the ellipse's local Y-axis.
   * 
   * This is half the height of the ellipse in the direction of the
   * center pose's left direction (after rotation). The ellipse
   * extends ±ySemiAxis from the center along this axis.
   * 
   * Units: meters
   * Must be positive
   * 
   * Note: This is the semi-axis, not the full height. The full height
   * along this axis is 2 * ySemiAxis.
   */
  double ySemiAxis = 3;
}
