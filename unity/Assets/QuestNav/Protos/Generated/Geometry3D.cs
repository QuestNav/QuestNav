// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: geometry3d.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Wpi.Proto {

  /// <summary>Holder for reflection information generated from geometry3d.proto</summary>
  public static partial class Geometry3DReflection {

    #region Descriptor
    /// <summary>File descriptor for geometry3d.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Geometry3DReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBnZW9tZXRyeTNkLnByb3RvEgl3cGkucHJvdG8iOAoVUHJvdG9idWZUcmFu",
            "c2xhdGlvbjNkEgkKAXgYASABKAESCQoBeRgCIAEoARIJCgF6GAMgASgBIkAK",
            "ElByb3RvYnVmUXVhdGVybmlvbhIJCgF3GAEgASgBEgkKAXgYAiABKAESCQoB",
            "eRgDIAEoARIJCgF6GAQgASgBIj4KElByb3RvYnVmUm90YXRpb24zZBIoCgFx",
            "GAEgASgLMh0ud3BpLnByb3RvLlByb3RvYnVmUXVhdGVybmlvbiJ4Cg5Qcm90",
            "b2J1ZlBvc2UzZBI1Cgt0cmFuc2xhdGlvbhgBIAEoCzIgLndwaS5wcm90by5Q",
            "cm90b2J1ZlRyYW5zbGF0aW9uM2QSLwoIcm90YXRpb24YAiABKAsyHS53cGku",
            "cHJvdG8uUHJvdG9idWZSb3RhdGlvbjNkIn0KE1Byb3RvYnVmVHJhbnNmb3Jt",
            "M2QSNQoLdHJhbnNsYXRpb24YASABKAsyIC53cGkucHJvdG8uUHJvdG9idWZU",
            "cmFuc2xhdGlvbjNkEi8KCHJvdGF0aW9uGAIgASgLMh0ud3BpLnByb3RvLlBy",
            "b3RvYnVmUm90YXRpb24zZCJZCg9Qcm90b2J1ZlR3aXN0M2QSCgoCZHgYASAB",
            "KAESCgoCZHkYAiABKAESCgoCZHoYAyABKAESCgoCcngYBCABKAESCgoCcnkY",
            "BSABKAESCgoCcnoYBiABKAFCGgoYZWR1LndwaS5maXJzdC5tYXRoLnByb3Rv",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Wpi.Proto.ProtobufTranslation3d), global::Wpi.Proto.ProtobufTranslation3d.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Wpi.Proto.ProtobufQuaternion), global::Wpi.Proto.ProtobufQuaternion.Parser, new[]{ "W", "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Wpi.Proto.ProtobufRotation3d), global::Wpi.Proto.ProtobufRotation3d.Parser, new[]{ "Q" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Wpi.Proto.ProtobufPose3d), global::Wpi.Proto.ProtobufPose3d.Parser, new[]{ "Translation", "Rotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Wpi.Proto.ProtobufTransform3d), global::Wpi.Proto.ProtobufTransform3d.Parser, new[]{ "Translation", "Rotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Wpi.Proto.ProtobufTwist3d), global::Wpi.Proto.ProtobufTwist3d.Parser, new[]{ "Dx", "Dy", "Dz", "Rx", "Ry", "Rz" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// Represents a 3D translation (displacement) vector.
  /// 
  /// This message encodes a 3D displacement or position vector using Cartesian
  /// coordinates. It extends the 2D translation concept into three dimensions
  /// and serves as a building block for more complex 3D geometric representations.
  /// 
  /// Applications:
  /// - 3D object positions in space
  /// - Displacement vectors between 3D points
  /// - 3D velocity vectors (when representing change in position)
  /// - Camera/sensor positions relative to robot
  /// - AprilTag positions in 3D space
  /// 
  /// Coordinate System:
  /// - X: Forward/backward displacement (positive = forward)
  /// - Y: Left/right displacement (positive = left)
  /// - Z: Up/down displacement (positive = up)
  /// - Units: meters
  /// </summary>
  public sealed partial class ProtobufTranslation3d : pb::IMessage<ProtobufTranslation3d>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtobufTranslation3d> _parser = new pb::MessageParser<ProtobufTranslation3d>(() => new ProtobufTranslation3d());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProtobufTranslation3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Wpi.Proto.Geometry3DReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufTranslation3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufTranslation3d(ProtobufTranslation3d other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufTranslation3d Clone() {
      return new ProtobufTranslation3d(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    /// <summary>
    ///*
    /// X-coordinate (forward/backward displacement).
    /// 
    /// Positive values indicate forward direction.
    /// Negative values indicate backward direction.
    /// Units: meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    /// <summary>
    ///*
    /// Y-coordinate (left/right displacement).
    /// 
    /// Positive values indicate leftward direction.
    /// Negative values indicate rightward direction.
    /// Units: meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    /// <summary>
    ///*
    /// Z-coordinate (up/down displacement).
    /// 
    /// Positive values indicate upward direction.
    /// Negative values indicate downward direction.
    /// Units: meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProtobufTranslation3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProtobufTranslation3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProtobufTranslation3d other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents a quaternion for 3D rotation.
  /// 
  /// Quaternions provide a mathematically robust way to represent 3D rotations
  /// without the singularities (gimbal lock) that can occur with Euler angles.
  /// They are the preferred representation for 3D rotations in robotics.
  /// 
  /// Mathematical Properties:
  /// - Unit quaternion: w² + x² + y² + z² = 1
  /// - Represents rotation around axis (x,y,z) by angle θ:
  ///   w = cos(θ/2), (x,y,z) = sin(θ/2) * unit_axis
  /// - Identity rotation: (w=1, x=0, y=0, z=0)
  /// - Conjugate: (w, -x, -y, -z) represents inverse rotation
  /// 
  /// Applications:
  /// - 3D object orientations
  /// - IMU/gyroscope data representation
  /// - Camera pose orientations
  /// - Robotic arm joint orientations
  /// - Smooth rotation interpolation (SLERP)
  /// 
  /// Advantages over Euler angles:
  /// - No gimbal lock singularities
  /// - Smooth interpolation
  /// - Efficient composition of rotations
  /// - Numerically stable
  /// </summary>
  public sealed partial class ProtobufQuaternion : pb::IMessage<ProtobufQuaternion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtobufQuaternion> _parser = new pb::MessageParser<ProtobufQuaternion>(() => new ProtobufQuaternion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProtobufQuaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Wpi.Proto.Geometry3DReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufQuaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufQuaternion(ProtobufQuaternion other) : this() {
      w_ = other.w_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufQuaternion Clone() {
      return new ProtobufQuaternion(this);
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 1;
    private double w_;
    /// <summary>
    ///*
    /// W component (scalar/real part) of the quaternion.
    /// 
    /// This is the "real" or "scalar" component of the quaternion.
    /// For a rotation by angle θ around an axis, w = cos(θ/2).
    /// 
    /// Range: [-1, 1] for unit quaternions
    /// Identity rotation: w = 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private double x_;
    /// <summary>
    ///*
    /// X component (i coefficient) of the quaternion.
    /// 
    /// This is the coefficient of the i basis quaternion.
    /// For a rotation by angle θ around axis (ax, ay, az),
    /// x = sin(θ/2) * ax (where (ax, ay, az) is unit length).
    /// 
    /// Range: [-1, 1] for unit quaternions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private double y_;
    /// <summary>
    ///*
    /// Y component (j coefficient) of the quaternion.
    /// 
    /// This is the coefficient of the j basis quaternion.
    /// For a rotation by angle θ around axis (ax, ay, az),
    /// y = sin(θ/2) * ay (where (ax, ay, az) is unit length).
    /// 
    /// Range: [-1, 1] for unit quaternions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private double z_;
    /// <summary>
    ///*
    /// Z component (k coefficient) of the quaternion.
    /// 
    /// This is the coefficient of the k basis quaternion.
    /// For a rotation by angle θ around axis (ax, ay, az),
    /// z = sin(θ/2) * az (where (ax, ay, az) is unit length).
    /// 
    /// Range: [-1, 1] for unit quaternions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProtobufQuaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProtobufQuaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(W, other.W)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (W != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(W);
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (W != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(W);
      }
      if (X != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (W != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(W);
      }
      if (X != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (W != 0D) {
        size += 1 + 8;
      }
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProtobufQuaternion other) {
      if (other == null) {
        return;
      }
      if (other.W != 0D) {
        W = other.W;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            W = input.ReadDouble();
            break;
          }
          case 17: {
            X = input.ReadDouble();
            break;
          }
          case 25: {
            Y = input.ReadDouble();
            break;
          }
          case 33: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            W = input.ReadDouble();
            break;
          }
          case 17: {
            X = input.ReadDouble();
            break;
          }
          case 25: {
            Y = input.ReadDouble();
            break;
          }
          case 33: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents a 3D rotation using a quaternion.
  /// 
  /// This message wraps a quaternion to represent 3D rotations in a standardized
  /// way. It provides a clean interface for 3D rotation operations while
  /// leveraging the mathematical advantages of quaternions internally.
  /// 
  /// The rotation represents the orientation of a coordinate frame relative to
  /// a reference frame, or the rotation needed to transform vectors from one
  /// coordinate system to another.
  /// 
  /// Applications:
  /// - Object orientations in 3D space
  /// - Camera pose rotations
  /// - IMU orientation data
  /// - Robotic arm end-effector orientations
  /// - Transformation between coordinate frames
  /// 
  /// Mathematical Operations:
  /// - Composition: R3 = R2 * R1 (apply R1 first, then R2)
  /// - Inverse: R^(-1) represents the opposite rotation
  /// - Identity: No rotation (quaternion w=1, x=y=z=0)
  /// </summary>
  public sealed partial class ProtobufRotation3d : pb::IMessage<ProtobufRotation3d>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtobufRotation3d> _parser = new pb::MessageParser<ProtobufRotation3d>(() => new ProtobufRotation3d());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProtobufRotation3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Wpi.Proto.Geometry3DReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufRotation3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufRotation3d(ProtobufRotation3d other) : this() {
      q_ = other.q_ != null ? other.q_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufRotation3d Clone() {
      return new ProtobufRotation3d(this);
    }

    /// <summary>Field number for the "q" field.</summary>
    public const int QFieldNumber = 1;
    private global::Wpi.Proto.ProtobufQuaternion q_;
    /// <summary>
    ///*
    /// Quaternion representing the 3D rotation.
    /// 
    /// This quaternion should be normalized (unit quaternion) to represent
    /// a valid rotation. Non-unit quaternions may lead to scaling effects
    /// in addition to rotation.
    /// 
    /// The quaternion represents the rotation from the reference coordinate
    /// frame to the rotated coordinate frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Wpi.Proto.ProtobufQuaternion Q {
      get { return q_; }
      set {
        q_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProtobufRotation3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProtobufRotation3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Q, other.Q)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (q_ != null) hash ^= Q.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (q_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Q);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (q_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Q);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (q_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Q);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProtobufRotation3d other) {
      if (other == null) {
        return;
      }
      if (other.q_ != null) {
        if (q_ == null) {
          Q = new global::Wpi.Proto.ProtobufQuaternion();
        }
        Q.MergeFrom(other.Q);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (q_ == null) {
              Q = new global::Wpi.Proto.ProtobufQuaternion();
            }
            input.ReadMessage(Q);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (q_ == null) {
              Q = new global::Wpi.Proto.ProtobufQuaternion();
            }
            input.ReadMessage(Q);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents a complete 3D pose (position and orientation).
  /// 
  /// This message combines a 3D position (translation) with a 3D orientation
  /// (rotation) to fully describe an object's pose in 3D space. This extends
  /// the 2D pose concept into three dimensions for applications requiring
  /// full spatial representation.
  /// 
  /// A 3D pose answers two fundamental questions:
  /// 1. Where is the object in 3D space? (translation component)
  /// 2. How is it oriented in 3D space? (rotation component)
  /// 
  /// Applications:
  /// - Camera poses for vision processing
  /// - AprilTag poses in 3D space
  /// - Robotic arm end-effector poses
  /// - Drone/UAV poses (position and attitude)
  /// - 3D object tracking and localization
  /// - Sensor mounting positions and orientations
  /// 
  /// The pose represents the object's coordinate frame relative to a reference
  /// coordinate frame, enabling transformation of points and vectors between
  /// the two coordinate systems.
  /// 
  /// Coordinate Frame Transformation:
  /// Given a point P in the object's local frame, the corresponding point
  /// in the reference frame is: P_ref = rotation * P_local + translation
  /// </summary>
  public sealed partial class ProtobufPose3d : pb::IMessage<ProtobufPose3d>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtobufPose3d> _parser = new pb::MessageParser<ProtobufPose3d>(() => new ProtobufPose3d());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProtobufPose3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Wpi.Proto.Geometry3DReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufPose3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufPose3d(ProtobufPose3d other) : this() {
      translation_ = other.translation_ != null ? other.translation_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufPose3d Clone() {
      return new ProtobufPose3d(this);
    }

    /// <summary>Field number for the "translation" field.</summary>
    public const int TranslationFieldNumber = 1;
    private global::Wpi.Proto.ProtobufTranslation3d translation_;
    /// <summary>
    ///*
    /// Position component of the 3D pose.
    /// 
    /// This specifies where the object is located in 3D space using the
    /// reference coordinate system. The translation represents the position
    /// of the object's coordinate frame origin relative to the reference frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Wpi.Proto.ProtobufTranslation3d Translation {
      get { return translation_; }
      set {
        translation_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::Wpi.Proto.ProtobufRotation3d rotation_;
    /// <summary>
    ///*
    /// Orientation component of the 3D pose.
    /// 
    /// This specifies how the object is oriented in 3D space relative to
    /// the reference coordinate system. The rotation represents the orientation
    /// of the object's coordinate frame relative to the reference frame.
    /// 
    /// Combined with translation, this fully defines the object's pose and
    /// allows for coordinate transformations between object and reference frames.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Wpi.Proto.ProtobufRotation3d Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProtobufPose3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProtobufPose3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Translation, other.Translation)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (translation_ != null) hash ^= Translation.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (translation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Translation);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (translation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Translation);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (translation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Translation);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProtobufPose3d other) {
      if (other == null) {
        return;
      }
      if (other.translation_ != null) {
        if (translation_ == null) {
          Translation = new global::Wpi.Proto.ProtobufTranslation3d();
        }
        Translation.MergeFrom(other.Translation);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::Wpi.Proto.ProtobufRotation3d();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (translation_ == null) {
              Translation = new global::Wpi.Proto.ProtobufTranslation3d();
            }
            input.ReadMessage(Translation);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::Wpi.Proto.ProtobufRotation3d();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (translation_ == null) {
              Translation = new global::Wpi.Proto.ProtobufTranslation3d();
            }
            input.ReadMessage(Translation);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::Wpi.Proto.ProtobufRotation3d();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents a 3D coordinate transformation.
  /// 
  /// This message describes how to transform coordinates from one 3D coordinate
  /// frame to another. It combines a 3D translation and rotation to define the
  /// complete spatial relationship between two coordinate systems.
  /// 
  /// Mathematical Interpretation:
  /// Given a point P in frame A, the corresponding point in frame B is:
  /// P_B = Transform3d * P_A = Rotation * P_A + Translation
  /// 
  /// This follows the standard transformation sequence:
  /// 1. Apply rotation to the point
  /// 2. Add translation to the rotated point
  /// 
  /// Applications:
  /// - Transform between robot and world coordinate frames
  /// - Camera calibration and extrinsic parameters
  /// - Sensor mounting transformations
  /// - Relative positioning between 3D objects
  /// - Coordinate frame conversions in 3D path planning
  /// - Multi-robot relative localization
  /// 
  /// The transform represents "how to get from frame A to frame B" and can be
  /// inverted to get the reverse transformation. Transforms can also be composed
  /// to create transformation chains through multiple coordinate frames.
  /// </summary>
  public sealed partial class ProtobufTransform3d : pb::IMessage<ProtobufTransform3d>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtobufTransform3d> _parser = new pb::MessageParser<ProtobufTransform3d>(() => new ProtobufTransform3d());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProtobufTransform3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Wpi.Proto.Geometry3DReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufTransform3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufTransform3d(ProtobufTransform3d other) : this() {
      translation_ = other.translation_ != null ? other.translation_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufTransform3d Clone() {
      return new ProtobufTransform3d(this);
    }

    /// <summary>Field number for the "translation" field.</summary>
    public const int TranslationFieldNumber = 1;
    private global::Wpi.Proto.ProtobufTranslation3d translation_;
    /// <summary>
    ///*
    /// Translation component of the 3D transformation.
    /// 
    /// This represents the displacement between the origins of the two
    /// coordinate frames in 3D space. It specifies how far and in which
    /// direction the target frame's origin is from the source frame's origin.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Wpi.Proto.ProtobufTranslation3d Translation {
      get { return translation_; }
      set {
        translation_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::Wpi.Proto.ProtobufRotation3d rotation_;
    /// <summary>
    ///*
    /// Rotation component of the 3D transformation.
    /// 
    /// This represents the angular difference between the two coordinate
    /// frames in 3D space. It specifies how the target frame is rotated
    /// relative to the source frame.
    /// 
    /// The rotation is applied before the translation in the transformation
    /// sequence (standard mathematical convention for homogeneous transforms).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Wpi.Proto.ProtobufRotation3d Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProtobufTransform3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProtobufTransform3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Translation, other.Translation)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (translation_ != null) hash ^= Translation.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (translation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Translation);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (translation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Translation);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (translation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Translation);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProtobufTransform3d other) {
      if (other == null) {
        return;
      }
      if (other.translation_ != null) {
        if (translation_ == null) {
          Translation = new global::Wpi.Proto.ProtobufTranslation3d();
        }
        Translation.MergeFrom(other.Translation);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::Wpi.Proto.ProtobufRotation3d();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (translation_ == null) {
              Translation = new global::Wpi.Proto.ProtobufTranslation3d();
            }
            input.ReadMessage(Translation);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::Wpi.Proto.ProtobufRotation3d();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (translation_ == null) {
              Translation = new global::Wpi.Proto.ProtobufTranslation3d();
            }
            input.ReadMessage(Translation);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::Wpi.Proto.ProtobufRotation3d();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Represents a 3D twist (velocity in 3D space).
  /// 
  /// This message encodes the instantaneous velocity of an object in 3D space,
  /// including both linear and angular velocity components. It describes how
  /// an object's 3D pose is changing over time, extending the 2D twist concept
  /// into three dimensions.
  /// 
  /// Mathematical Interpretation:
  /// The twist represents the time derivative of 3D pose:
  /// - Linear velocity: (dx/dt, dy/dt, dz/dt)
  /// - Angular velocity: (rx, ry, rz) as rotation rates about each axis
  /// 
  /// Applications:
  /// - 3D robot velocity commands (drones, robotic arms)
  /// - 3D velocity feedback from odometry systems
  /// - Velocity constraints in 3D path planning
  /// - Dynamic modeling and simulation in 3D
  /// - IMU angular velocity data representation
  /// - Camera motion estimation
  /// 
  /// Coordinate Frame:
  /// The twist can be expressed in different coordinate frames (body-relative
  /// or world-relative) depending on the application context. The angular
  /// velocity components represent rotation rates about the coordinate axes.
  /// </summary>
  public sealed partial class ProtobufTwist3d : pb::IMessage<ProtobufTwist3d>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtobufTwist3d> _parser = new pb::MessageParser<ProtobufTwist3d>(() => new ProtobufTwist3d());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProtobufTwist3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Wpi.Proto.Geometry3DReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufTwist3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufTwist3d(ProtobufTwist3d other) : this() {
      dx_ = other.dx_;
      dy_ = other.dy_;
      dz_ = other.dz_;
      rx_ = other.rx_;
      ry_ = other.ry_;
      rz_ = other.rz_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtobufTwist3d Clone() {
      return new ProtobufTwist3d(this);
    }

    /// <summary>Field number for the "dx" field.</summary>
    public const int DxFieldNumber = 1;
    private double dx_;
    /// <summary>
    ///*
    /// Linear velocity in X direction.
    /// 
    /// Rate of change of X position over time. In world coordinates,
    /// this represents forward/backward velocity.
    /// 
    /// Positive values: Moving in positive X direction (forward)
    /// Negative values: Moving in negative X direction (backward)
    /// Units: meters per second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Dx {
      get { return dx_; }
      set {
        dx_ = value;
      }
    }

    /// <summary>Field number for the "dy" field.</summary>
    public const int DyFieldNumber = 2;
    private double dy_;
    /// <summary>
    ///*
    /// Linear velocity in Y direction.
    /// 
    /// Rate of change of Y position over time. In world coordinates,
    /// this represents left/right velocity (strafing).
    /// 
    /// Positive values: Moving in positive Y direction (left)
    /// Negative values: Moving in negative Y direction (right)
    /// Units: meters per second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Dy {
      get { return dy_; }
      set {
        dy_ = value;
      }
    }

    /// <summary>Field number for the "dz" field.</summary>
    public const int DzFieldNumber = 3;
    private double dz_;
    /// <summary>
    ///*
    /// Linear velocity in Z direction.
    /// 
    /// Rate of change of Z position over time. In world coordinates,
    /// this represents up/down velocity (climbing/descending).
    /// 
    /// Positive values: Moving in positive Z direction (up)
    /// Negative values: Moving in negative Z direction (down)
    /// Units: meters per second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Dz {
      get { return dz_; }
      set {
        dz_ = value;
      }
    }

    /// <summary>Field number for the "rx" field.</summary>
    public const int RxFieldNumber = 4;
    private double rx_;
    /// <summary>
    ///*
    /// Angular velocity about X-axis (roll rate).
    /// 
    /// Rate of rotation about the X-axis. This represents how fast
    /// the object is rolling (rotating around its forward axis).
    /// 
    /// Positive values: Counter-clockwise rotation when looking down the positive X-axis
    /// Negative values: Clockwise rotation when looking down the positive X-axis
    /// Units: radians per second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Rx {
      get { return rx_; }
      set {
        rx_ = value;
      }
    }

    /// <summary>Field number for the "ry" field.</summary>
    public const int RyFieldNumber = 5;
    private double ry_;
    /// <summary>
    ///*
    /// Angular velocity about Y-axis (pitch rate).
    /// 
    /// Rate of rotation about the Y-axis. This represents how fast
    /// the object is pitching (nose up/down motion).
    /// 
    /// Positive values: Counter-clockwise rotation when looking down the positive Y-axis
    /// Negative values: Clockwise rotation when looking down the positive Y-axis
    /// Units: radians per second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Ry {
      get { return ry_; }
      set {
        ry_ = value;
      }
    }

    /// <summary>Field number for the "rz" field.</summary>
    public const int RzFieldNumber = 6;
    private double rz_;
    /// <summary>
    ///*
    /// Angular velocity about Z-axis (yaw rate).
    /// 
    /// Rate of rotation about the Z-axis. This represents how fast
    /// the object is yawing (turning left/right).
    /// 
    /// Positive values: Counter-clockwise rotation when looking down the positive Z-axis
    /// Negative values: Clockwise rotation when looking down the positive Z-axis
    /// Units: radians per second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Rz {
      get { return rz_; }
      set {
        rz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProtobufTwist3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProtobufTwist3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Dx, other.Dx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Dy, other.Dy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Dz, other.Dz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rx, other.Rx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Ry, other.Ry)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rz, other.Rz)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Dx != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Dx);
      if (Dy != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Dy);
      if (Dz != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Dz);
      if (Rx != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rx);
      if (Ry != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Ry);
      if (Rz != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rz);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Dx != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Dx);
      }
      if (Dy != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Dy);
      }
      if (Dz != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Dz);
      }
      if (Rx != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Rx);
      }
      if (Ry != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Ry);
      }
      if (Rz != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Rz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Dx != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Dx);
      }
      if (Dy != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Dy);
      }
      if (Dz != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Dz);
      }
      if (Rx != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Rx);
      }
      if (Ry != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Ry);
      }
      if (Rz != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Rz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Dx != 0D) {
        size += 1 + 8;
      }
      if (Dy != 0D) {
        size += 1 + 8;
      }
      if (Dz != 0D) {
        size += 1 + 8;
      }
      if (Rx != 0D) {
        size += 1 + 8;
      }
      if (Ry != 0D) {
        size += 1 + 8;
      }
      if (Rz != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProtobufTwist3d other) {
      if (other == null) {
        return;
      }
      if (other.Dx != 0D) {
        Dx = other.Dx;
      }
      if (other.Dy != 0D) {
        Dy = other.Dy;
      }
      if (other.Dz != 0D) {
        Dz = other.Dz;
      }
      if (other.Rx != 0D) {
        Rx = other.Rx;
      }
      if (other.Ry != 0D) {
        Ry = other.Ry;
      }
      if (other.Rz != 0D) {
        Rz = other.Rz;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Dx = input.ReadDouble();
            break;
          }
          case 17: {
            Dy = input.ReadDouble();
            break;
          }
          case 25: {
            Dz = input.ReadDouble();
            break;
          }
          case 33: {
            Rx = input.ReadDouble();
            break;
          }
          case 41: {
            Ry = input.ReadDouble();
            break;
          }
          case 49: {
            Rz = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Dx = input.ReadDouble();
            break;
          }
          case 17: {
            Dy = input.ReadDouble();
            break;
          }
          case 25: {
            Dz = input.ReadDouble();
            break;
          }
          case 33: {
            Rx = input.ReadDouble();
            break;
          }
          case 41: {
            Ry = input.ReadDouble();
            break;
          }
          case 49: {
            Rz = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
